from conf import bot_views, bot_logic, bot_core
import io
from fastapi import UploadFile
from telebot import types
from src.States import MyStates
from src.command_handler import *

BOT = bot_core.bot
print(f"{id(BOT)} - main")

@BOT.message_handler(commands=["start"])
def start(message):
    BOT.set_state(message.from_user.id, MyStates.start)
    bot_views.start(message)
    BOT.set_state(message.from_user.id, MyStates.main_menu)


@BOT.message_handler(commands=["menu"])
def menu(message):
    BOT.set_state(message.from_user.id, MyStates.main_menu)
    bot_views.menu()


async def add_file(m):
    pass


@BOT.message_handler(
    content_types=["document"],
    state=MyStates.wait_document,  # –¢–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∂–¥–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
)
async def handle_telegram_document(message: types.Message):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ Telegram –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ add_file"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram
        file_info = BOT.get_file(message.document.file_id)
        file_data = BOT.download_file(file_info.file_path)

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç UploadFile, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç add_file
        upload_file = UploadFile(
            filename=message.document.file_name,
            file=io.BytesIO(file_data),
            size=message.document.file_size,
        )

        # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        result = await add_file(upload_file)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        BOT.reply_to(message, f"üò∫ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

    except Exception as e:
        BOT.reply_to(message, f"üòø –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        raise

    finally:
        BOT.set_state(message.from_user.id, MyStates.main_menu)
        bot_views.menu()


@BOT.message_handler(state=MyStates.wait_search, content_types=["text"])
def handle_search_query(message):
    bot_logic._search(message)



@BOT.message_handler(content_types=["text"])
def check_message(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –∫–æ–º–∞–Ω–¥–∞–º)"""
    current_state = BOT.get_state(message.from_user.id)
    if current_state in [MyStates.wait_document.name, MyStates.wait_search.name]:
        return

    if not message.text.startswith("/"):
        bot_views.answer_invalid_message()
    else:
        bot_views.answer_invalid_command()


@BOT.callback_query_handler(func=lambda callback: True)
def handler(callback: types.CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–ª–ª–±–µ–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –±–æ—Ç–∞"""
    if callback.data == "menu":
        bot_views.menu()
        BOT.delete_message(bot_views.user_id, callback.message.id)
    elif callback.data == "add_doc":
        bot_logic.add_doc()  # –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫–∞
        bot_views.delete_last_msg(callback.message.id)
    elif callback.data == "search_in_docs":
        BOT.set_state(callback.from_user.id, MyStates.wait_search)
        bot_logic.ask_request(callback.message)  # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ –¥–æ–∫–∞—Ö
        bot_views.delete_last_msg(callback.message.id)
        print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ set_state: {BOT.get_state(callback.from_user.id)}")
    elif callback.data == "manage":
        bot_logic.manage()  # —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫–∞
        bot_views.delete_last_msg(callback.message.id)
    elif callback.data == "back":
        bot_views.menu()
        bot_views.delete_last_msg(callback.message.id)
    elif callback.data == "change1":
        bot_views.answer_on_manage_end()
    elif callback.data == "change2":
        bot_views.answer_on_manage_end()
    elif callback.data == "change3":
        bot_views.answer_on_manage_end()


BOT.polling(non_stop=True)
